asyncapi: 3.0.0
info:
  title: MQTT for IO-Link Gateways
  version: 0.1.0
  description: This is the recommended specification for IO-Link gateway MQTT communication by the IO-Link consortium.
  termsOfService: "https://www.io-link.com"
  contact:
    name: IO-Link Community
    email: info@io-link.com
    url: "http://www.io-link.com"
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
defaultContentType: application/json
servers:
  iol-master:
    host: "{iolm-ip}:{port}"
    protocol: mqtt
    protocolVersion: 3.1.1
    description: IO-Link gateway as MQTT client
    variables:
      iolm-ip:
        default: 192.168.0.1
      port:
        enum:
          - "1883"
          - "8883"
        default: "1883"

channels:
  "{originatorId}/gateway/identification":
    address: "{originatorId}/gateway/identification"
    description: Publishes gateway nameplate information, send at connection startup/on change
    parameters:
      $ref: "./schemas.yaml#/schemas/originatorId"
    messages:
      publish.message:
        name: gatewayIdentificationMessage
        payload:
          $ref: "./schemas.yaml#/schemas/gatewayIdentificationGet"

  "{originatorId}/gateway/events":
    address: "{originatorId}/gateway/events"
    description: Publishes list of occured gateway events, send on change
    parameters:
      $ref: "./schemas.yaml#/schemas/originatorId"
    messages:
      publish.message:
        name: gatewayEventsMessage
        payload:
          $ref: "./schemas.yaml#/schemas/gatewayEventsGet"

  "{originatorId}/masters/{masterNumber}/identification":
    address: "{originatorId}/masters/{masterNumber}/identification"
    description: Publishes master identification data, send at connection startup/on change
    parameters:
      originatorId:
        $ref: "./schemas.yaml#/schemas/originatorId"
      masterNumber:
        $ref: "./schemas.yaml#/schemas/masterNumberMqtt"
    messages:
      publish.message:
        name: masterIdentificationMessage
        payload:
          $ref: "./schemas.yaml#/schemas/masterIdentificationGet"

  "{originatorId}/masters/{masterNumber}/ports/{portNumber}/status":
    address: "{originatorId}/masters/{masterNumber}/ports/{portNumber}/status"
    description: Publishes the port status, send at connection startup/on change
    parameters:
      originatorId:
        $ref: "./schemas.yaml#/schemas/originatorId"
      masterNumber:
        $ref: "./schemas.yaml#/schemas/masterNumberMqtt"
      portNumber:
        $ref: "./schemas.yaml#/schemas/portNumberMqtt"
    messages:
      publish.message:
        name: portStatusMessage
        payload:
          $ref: "./schemas.yaml#/schemas/mastersPortsStatusGet"

  "{originatorId}/devices/{deviceAlias}/identification":
    address: "{originatorId}/devices/{deviceAlias}/identification"
    description: Publishes device identification, send at connection startup/on change
    parameters:
      originatorId:
        $ref: "./schemas.yaml#/schemas/originatorId"
      deviceAlias:
        $ref: "./schemas.yaml#/schemas/deviceAliasMqtt"
    messages:
      publish.message:
        name: deviceIdentificationMessage
        payload:
          $ref: "./schemas.yaml#/schemas/deviceIdentificationGet"

  "{originatorId}/devices/{deviceAlias}/events":
    address: "{originatorId}/devices/{deviceAlias}/events"
    description: Publishes device events, send at connection startup/on change
    parameters:
      originatorId:
        $ref: "./schemas.yaml#/schemas/originatorId"
      deviceAlias:
        $ref: "./schemas.yaml#/schemas/deviceAliasMqtt"
    messages:
      publish.message:
        name: deviceEventsMessage
        payload:
          $ref: "./schemas.yaml#/schemas/deviceEventsGet"

  "{originatorId}/devices/{deviceAlias}/processdata/value":
    address: "{originatorId}/devices/{deviceAlias}/processdata/value"
    description: Publishes device process data, cyclically or on change
    parameters:
      originatorId:
        $ref: "./schemas.yaml#/schemas/originatorId"
      deviceAlias:
        $ref: "./schemas.yaml#/schemas/deviceAliasMqtt"
    messages:
      publish.message:
        name: deviceProcessDataMessage
        payload:
          $ref: "./schemas.yaml#/schemas/processDataValue"

  "{originatorId}/devices/{deviceAlias}/parameter/{parameterIdent}/value":
    address: "{originatorId}/devices/{deviceAlias}/parameter/{parameterIdent}/value"
    description: Publishes device parameter data, depending on the configuration via REST (POST /mqtt/topics), cyclically or on change
    parameters:
      originatorId:
        $ref: "./schemas.yaml#/schemas/originatorId"
      deviceAlias:
        $ref: "./schemas.yaml#/schemas/deviceAliasMqtt"
      parameterIdent:
        $ref: "./schemas.yaml#/schemas/parameterIdentMqtt"
    messages:
      publish.message:
        name: deviceParameterMessage
        payload:
          $ref: "./schemas.yaml#/schemas/deviceParameterValueGetPost"

  ? "{originatorId}/devices/{deviceAlias}/parameter/{parameterIdent}/{subParameterIdent}/value"
  : address: "{originatorId}/devices/{deviceAlias}/parameter/{parameterIdent}/{subParameterIdent}/value"
    description: Publishes device sub-parameter data, depending on the configuration via REST (POST /mqtt/topics), cyclically or on change
    parameters:
      originatorId:
        $ref: "./schemas.yaml#/schemas/originatorId"
      deviceAlias:
        $ref: "./schemas.yaml#/schemas/deviceAliasMqtt"
      parameterIdent:
        $ref: "./schemas.yaml#/schemas/parameterIdentMqtt"
      subParameterIdent:
        $ref: "./schemas.yaml#/schemas/subParameterIdentMqtt"
    messages:
      publish.message:
        name: deviceSubParameterMessage
        payload:
          $ref: "./schemas.yaml#/schemas/deviceParameterValueGetPost"

  "{originatorId}/devices/{deviceAlias}/parameter/request/{transactionId}":
    address: "{originatorId}/devices/{deviceAlias}/parameter/request/{transactionId}"
    description: Listening to device parameter requests
    parameters:
      originatorId:
        $ref: "./schemas.yaml#/schemas/originatorId"
      deviceAlias:
        $ref: "./schemas.yaml#/schemas/deviceAliasMqtt"
      transactionId:
        $ref: "./schemas.yaml#/schemas/transactionId"
    messages:
      publish.message:
        name: deviceRequestMessage
        payload:
          $ref: "./schemas.yaml#/schemas/deviceBlockParameterizationPost"

  "{originatorId}/devices/{deviceAlias}/parameter/response/{transactionId}":
    address: "{originatorId}/devices/{deviceAlias}/parameter/response/{transactionId}"
    description: Publishes device parameter response depending on the request {originatorId}/devices/{deviceAlias}/parameter/request/{transactionId}
    parameters:
      originatorId:
        $ref: "./schemas.yaml#/schemas/originatorId"
      deviceAlias:
        $ref: "./schemas.yaml#/schemas/deviceAliasMqtt"
      transactionId:
        $ref: "./schemas.yaml#/schemas/transactionId"
    messages:
      publish.message:
        name: deviceResponseMessage
        payload:
          $ref: "./schemas.yaml#/schemas/deviceBlockParameterizationPostParametersAnswer"

operations:
  "{originatorId}/gateway/identification.publish":
    action: send
    channel:
      $ref: "#/channels/{originatorId}~1gateway~1identification"
    messages:
      - $ref: >-
          #/channels/{originatorId}~1gateway~1identification/messages/publish.message
  "{originatorId}/gateway/events.publish":
    action: send
    channel:
      $ref: "#/channels/{originatorId}~1gateway~1events"
    messages:
      - $ref: "#/channels/{originatorId}~1gateway~1events/messages/publish.message"
  "{originatorId}/masters/{masterNumber}/identification.publish":
    action: send
    channel:
      $ref: "#/channels/{originatorId}~1masters~1{masterNumber}~1identification"
    messages:
      - $ref: >-
          #/channels/{originatorId}~1masters~1{masterNumber}~1identification/messages/publish.message

  "{originatorId}/masters/{masterNumber}/ports/{portNumber}/status.publish":
    action: send
    channel:
      $ref: "#/channels/{originatorId}~1masters~1{masterNumber}~1ports~1{portNumber}~1status"
    messages:
      - $ref: >-
          #/channels/{originatorId}~1masters~1{masterNumber}~1ports~1{portNumber}~1status/messages/publish.message
  "{originatorId}/devices/{deviceAlias}/identification.publish":
    action: send
    channel:
      $ref: "#/channels/{originatorId}~1devices~1{deviceAlias}~1identification"
    bindings:
      mqtt:
        qos: 1
        retain: true
    messages:
      - $ref: >-
          #/channels/{originatorId}~1devices~1{deviceAlias}~1identification/messages/publish.message
  "{originatorId}/{deviceAlias}/event.publish":
    action: send
    channel:
      $ref: "#/channels/{originatorId}~1devices~1{deviceAlias}~1events"
    messages:
      - $ref: >-
          #/channels/{originatorId}~1devices~1{deviceAlias}~1events/messages/publish.message
  "{originatorId}/{deviceAlias}/processData.publish":
    action: send
    channel:
      $ref: "#/channels/{originatorId}~1devices~1{deviceAlias}~1processdata~1value"
    messages:
      - $ref: >-
          #/channels/{originatorId}~1devices~1{deviceAlias}~1processdata~1value/messages/publish.message
  "{originatorId}/{deviceAlias}/parameter/parameterIdent.publish":
    action: send
    channel:
      $ref: "#/channels/{originatorId}~1devices~1{deviceAlias}~1parameter~1{parameterIdent}~1value"
    messages:
      - $ref: >-
          #/channels/{originatorId}~1devices~1{deviceAlias}~1parameter~1{parameterIdent}~1value/messages/publish.message
  ? "{originatorId}/devices/{deviceAlias}/parameter/parameterIdent/subParameterIdent.publish"
  : action: send
    channel:
      $ref: "#/channels/{originatorId}~1devices~1{deviceAlias}~1parameter~1{parameterIdent}~1{subParameterIdent}~1value"
    messages:
      - $ref: >-
          #/channels/{originatorId}~1devices~1{deviceAlias}~1parameter~1{parameterIdent}~1value/messages/publish.message
  ? "{originatorId}/devices/{deviceAlias}/parameter/request/{transactionId}.subscribe"
  : action: receive
    channel:
      $ref: "#/channels/{originatorId}~1devices~1{deviceAlias}~1parameter~1request~1{transactionId}"
    reply:
      channel:
        $ref: "#/channels/{originatorId}~1devices~1{deviceAlias}~1parameter~1response~1{transactionId}"
