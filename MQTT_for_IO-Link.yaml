asyncapi: 2.6.0
info:
  title: MQTT for IO-Link Master
  version: 0.0.3
  description: >
    This is the _AsyncAPI_ specification of MQTT topics by the IO-Link consortium.
  termsOfService: "https://www.io-link.com"
  contact:
    name: "IO-Link Community"
    email: info@io-link.com
    url: "http://www.io-link.com"
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
defaultContentType: application/json
servers:
  iol-master:
    url: "{iolm-ip}:{port}"
    protocol: mqtt
    protocolVersion: 3.1.1
    description: io-link master as MQTT client
    variables:
      iolm-ip:
        default: "192.168.0.1"
      port:
        enum:
          - "1883"
          - "8883"
        default: "1883"
channels:
  "{originatorId}/gateway/identification":
    description: >-
      Publishes gateway nameplate information, send at startup or
      onChange
    parameters:
      originatorId:
        schema:
          $ref: "./schemas.yaml#/schemas/originatorId"
    subscribe:
      message:
        name: gatewayIdentification
        payload:
          $ref: "./schemas.yaml#/schemas/gatewayIdentificationGet"

  "{originatorId}/gateway/events":
    description: publishes gateway events
    parameters:
      originatorId:
        schema:
          $ref: "./schemas.yaml#/schemas/originatorId"
    subscribe:
      message:
        name: gatewayEvents
        payload:
          $ref: "./schemas.yaml#/schemas/gatewayEventsGet"

  "{originatorId}/master/{masterNumber}/identification":
    description: publishes master identification data, send at startup or
      onChange
    parameters:
      originatorId:
        schema:
          $ref: "./schemas.yaml#/schemas/originatorId"
      masterNumber:
        schema:
          $ref: "./schemas.yaml#/schemas/eventMasterNumber"
    subscribe:
      message:
        name: masterIdentification
        payload:
          $ref: "./schemas.yaml#/schemas/masterIdentificationGet"

  "{originatorId}/{deviceAlias}/identification":
    description: >-
      publishes device identification, send at connection
      startup (new connection)
    parameters:
      originatorId:
        schema:
          $ref: "./schemas.yaml#/schemas/originatorId"
      deviceAlias:
        schema:
          $ref: "./schemas.yaml#/schemas/deviceAlias"
    subscribe:
      message:
        name: deviceIdentification
        payload:
          $ref: "./schemas.yaml#/schemas/deviceIdentificationGet"
      bindings:
        mqtt:
          qos: 1
          retain: true

  "{originatorId}/{deviceAlias}/event":
    description: "publishes the device events, send at startup/onChange"
    parameters:
      originatorId:
        schema:
          $ref: "./schemas.yaml#/schemas/originatorId"
      deviceAlias:
        schema:
          $ref: "./schemas.yaml#/schemas/deviceAlias"
    subscribe:
      message:
        payload:
          $ref: "./schemas.yaml#/schemas/deviceEventsGet"

  "{originatorId}/{deviceAlias}/processData":
    parameters:
      originatorId:
        schema:
          $ref: "./schemas.yaml#/schemas/originatorId"
      deviceAlias:
        description: "Id of the device (e.g.  (i.e. an IO-Link device, an IO-Port number)"
        schema:
          type: string
          example: port1
    subscribe:
      message:
        name: processdata
        payload:
          $ref: "./schemas.yaml#/schemas/processDataValue"

  "{originatorId}/{portNumber}/status":
    description: "publishes the port status, send at startup/onChange"
    parameters:
      originatorId:
        schema:
          $ref: "./schemas.yaml#/schemas/originatorId"
      portNumber:
        schema:
          $ref: "./schemas.yaml#/schemas/eventPortNumber"
    subscribe:
      message:
        payload:
          $ref: "./schemas.yaml#/schemas/mastersPortsStatusGet"
